#!/usr/bin/python3

import os
import configparser
import time
import yaml
import sys
import argparse

# Работа с переменными
# Считываем/записываем в .ini
#
class Variables():

    __config = None

    __iniFileName = None

    def __init__(self, iniFile):
        self.__iniFileName = iniFile
        self.__config = configparser.ConfigParser()
        if os.path.exists(self.__iniFileName):
            self.__config.read(self.__iniFileName)

    def __writeIni(self):
        try:
            iniFile = open(self.__iniFileName, "w")
            self.__config.write(iniFile)
            iniFile.flush()
        except:
            return False

    def getVar(self, env, varName, interactive):
        try:
            var = self.__config.get(env, varName)
        except:
            var = ''

        if interactive or var == '':
            newVar = input("input {0} ({1}): ".format(varName, var))
        else:
            newVar = var

        if not newVar == '':
            if not self.__config.has_section(env):
                self.__config.add_section(env)
            self.__config.set(env, varName, newVar)
            self.__writeIni()
            return newVar

        return var

# Отрисовываем меню
#
class Menu():

    __ymlFile = None

    __items = None

    __container = None

    __variables = None

    def __init__(self, container = None, items = None, ymlFile = '/menu.yml'):
        self.__container = container
        self.__variables = Variables('env.ini')
        if items == None:
            currDir = os.path.dirname(os.path.abspath(__file__))
            menuDir = ''
            if os.path.isdir(currDir + '/menu'):
                menuDir = '/menu'
            yaml_file = open(currDir + menuDir + ymlFile, "r")
            try:
                menu = yaml.load(yaml_file, Loader=yaml.FullLoader)
            except:
                menu = yaml.load(yaml_file)
            self.__items = menu['items']
        else:
            self.__items = items

    def showItems(self):
        print('0. Exit')
        for i in self.__items:
            print(self.__items[i]['title'])

    def loop(self):
        while True:
            self.showItems()
            item = input('Chose action: ')
            if item == '0':
                break
            self.choseItem(item)

    def choseItem(self, item):
        for i in self.__items:
            if item == str(i):
                if('file' in self.__items[i]):
                    subMenu = Menu(self, None, self.__items[i]['file'])
                    subMenu.loop()
                if('items' in self.__items[i]):
                    subMenu = Menu(self, self.__items[i]['items'])
                    subMenu.loop()
                if('commands' in self.__items[i]):
                    vars = self.__getVars(self.__items[i])
                    if(self.__runCommands(self.__items[i], vars) != True):
                        self.__catch(self.__items[i], vars)

    def execItem(self, item):
        for i in self.__items:
            if item == str(i):
                if('items' in self.__items[i]):
                    subMenu = Menu(self, self.__items[i]['items'])
                    return subMenu
                if('commands' in self.__items[i]):
                    vars = self.__getVars(self.__items[i], False)
                    self.__runCommands(self.__items[i], vars)

    def __runCommands(self, item, vars):
        if('commands' in item):
            for command in item['commands']:
                exitCode = os.system(command % vars)
                if(exitCode != 0):
                    return False
        return True

    def __catch(self, item, vars):
        if('catch' in item):
            for command in item['catch']:
                os.system(command % vars)

    def __getVars(self, item, interative = True):
        env = item['env']
        currentDir = os.path.dirname(os.path.abspath(__file__))
        vars = {'currentDir': currentDir}
        if 'vars' in item:
            for varName in item['vars']:
                v = self.__variables.getVar(env, varName, interative)
                vars[varName] = v
        
        return vars

parser = argparse.ArgumentParser()
parser.add_argument ('-e', '--exec', nargs='?')
namespace = parser.parse_args (sys.argv[1:])

menu = Menu()

if namespace.exec:
    items = namespace.exec.split('-')
    for item in items:
        menu = menu.execItem(item)
    exit()

while True:
    menu.showItems()
    item = input('Chose action: ')
    if item == '0':
        break
    menu.choseItem(item)